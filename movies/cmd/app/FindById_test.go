// ********RoostGPT********
/*
Test generated by RoostGPT for test azure-test-assistent using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=findByID_3f59747bbe
ROOST_METHOD_SIG_HASH=findByID_cab6a16c94

Test Scenario 1: Test findByID with a valid movie ID

Details:
  Description: This test is meant to check the normal operation of the `findByID` function when given a valid movie id. It should successfully retrieve the desired movie's data from the database.
Execution:
  Arrange: Mock the `movies.FindByID` method to return a valid movie when provided an existing movie id.
  Act: Invoke the `findByID` function with a valid movie id.
  Assert: Use Go testing facilities to verify that an HTTP status code of 200 is returned, the response body contains the movie's details, and no error is logged.
Validation:
  The choice of assertion relies on the expected correct behavior of the function when provided with a valid movie id. This test is essential to ensure that the function can correctly handle a typical correct scenario.

Test Scenario 2: Test findByID with an invalid/non-existing movie ID

Details:
  Description: This test is meant to check the `findByID` function when given an invalid or non-existing movie id. The function should write an information log.
Execution:
  Arrange: Mock the `movies.FindByID` method to return an error on a non-existing movie id.
  Act: Invoke the `findByID` function with a non-existing movie id.
  Assert: Use Go testing facilities to verify that an information log is written indicating that the movie was not found and no http status code is set.
Validation:
  The choice of assertion depends on the expected behavior of the function when provided with a non-existing movie id. This test is crucial to ensure that the function can handle error cases gracefully.

Test Scenario 3: Test findByID function failure on data encoding to JSON

Details:
  Description: This test is meant to check the `findByID` function when facing an inability to marshal the movie data into JSON. The function should return an server error.
Execution:
  Arrange: Mock the `movies.FindByID` method to return valid movie data that cannot be serialized into JSON.
  Act: Invoke the `findByID` function with a valid movie ID.
  Assert: Use Go testing facilities to verify that a server error is logged and that an HTTP status code of 500 is returned.
Validation:
  The assertion stems from the use of the function `app.serverError` whenever an error is encountered by the function, especially when marshalling data. This form of test is important to ensure that the app can handle edge cases where serialization fails.
*/

// ********RoostGPT********
package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"github.com/gorilla/mux"
	"github.com/mmorejon/microservices-docker-go-mongodb/movies/pkg/models"
	"io/ioutil"
	"log"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"
)

type testData struct {
	id string
	movie *models.Movie
	err error
}

func TestFindById(t *testing.T) {
	// Prepare test data
	infoLog := log.New(ioutil.Discard, "", log.LstdFlags)
	errorLog := log.New(ioutil.Discard, "", log.LstdFlags)
	movieModel := &models.MockMovieModel{}

	app := &application{
		errorLog: errorLog,
		infoLog:  infoLog,
		movies:   movieModel,
	}

	tableTests := []struct{
		desc       string
		testdata   testData
		expectedStatus int
	}{
		{"Valid Movie ID", testData{"1234", &models.Movie{Title: "Test"}, nil}, http.StatusOK},
		{"Invalid Movie ID", testData{"invalid", nil, models.ErrNoDocuments}, 0},
		{"Data Encoding Error", testData{"1234", &models.Movie{Title: string([]byte{0x80, 0x81, 0x82, 0x83, 0x84})}, nil}, http.StatusInternalServerError},
	}

	// Run these tests
	for _, tt := range tableTests {
		t.Run(tt.desc, func(t*testing.T) {
			movieModel.MockDataByID[tt.testdata.id] = tt.testdata.movie
			movieModel.MockErrorByID[tt.testdata.id] = tt.testdata.err

			req := httptest.NewRequest(http.MethodGet, "/"+tt.testdata.id, nil)
			res := httptest.NewRecorder()

			// Setup request context
			req = mux.SetURLVars(req, map[string]string{"id": tt.testdata.id})

			app.findByID(res, req)
			
			// Assert (Check Response Status)
			if res.Code != tt.expectedStatus {
				t.Errorf("Expected status %d, got %d", tt.expectedStatus, res.Code)
			}
			
			_, err := ioutil.ReadAll(res.Body)
			if tt.expectedStatus == http.StatusOK && err != nil {
				t.Errorf("Read body: %v", err)
				return
			} 
			
			if tt.testdata.err != nil && tt.testdata.err.Error() == "ErrNoDocuments" {
				// Assert (Check Log)
				if tt.desc != "Movie not found" {
					t.Errorf("Expected log for failing to find movie, got %s", tt.desc)
				}
			}
		})
	}
}
