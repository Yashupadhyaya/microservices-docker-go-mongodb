// ********RoostGPT********
/*
Test generated by RoostGPT for test go-test-assistent using AI Type  and AI Model 

ROOST_METHOD_HASH=routes_24b1348bbb
ROOST_METHOD_SIG_HASH=routes_794350c1ed

Scenario 1: Succesfully Route All Movies API Endpoint
  Details:
    Description: This test will check if the "/api/movies/" endpoint for GET method is being appended to the router correctly by validating the assigned route application handler and method.
  Execution:
    Arrange: Instantiation of the application struct, then mocking the application methods `all`.
    Act: Invoke the `routes` method.
    Assert: Check if the router has "/api/movies/" assigned for GET method and the assigned handler is `all`.
  Validation:
    We are ensuring that a GET request to "/api/movies/" endpoint should invoke the `all` method. This is important for routing the client requests correctly.

Scenario 2: Succesfully Route Find Movies API Endpoint
  Details:
    Description: This test will check if the "/api/movies/{id}" endpoint for GET method is being appended to the router correctly by validating the assigned route application handler and method.
  Execution:
    Arrange: Instantiation of the application struct, then mocking the application method `findByID`.
    Act: Invoke the `routes` method.
    Assert: Check if the router has "/api/movies/{id}" assigned for GET method and the assigned handler is `findByID`.
  Validation:
    We are ensuring that a GET request to "/api/movies/{id}" endpoint should invoke the `findByID` method. This is crucial for fetching individual movie detail correctly via APIs.

Scenario 3: Succesfully Route Insert Movies API Endpoint
  Details:
    Description: This test will check if the "/api/movies/" endpoint for POST method is being appended to the router correctly by validating the assigned route application handler and method.
  Execution:
    Arrange: Instantiation of the application struct, then mocking the application method `insert`.
    Act: Invoke the `routes` method.
    Assert: Check if the router has "/api/movies/" assigned for POST method and the assigned handler is `insert`.
  Validation:
    We are ensuring that a POST request to "/api/movies/" endpoint should invoke the `insert` method. This is crucial for inserting a new movie detail correctly via APIs.

Scenario 4: Succesfully Route Delete Movies API Endpoint
  Details:
    Description: This test will check if the "/api/movies/{id}" endpoint for DELETE method is being appended to the router correctly by validating the assigned route application handler and method.
  Execution:
    Arrange: Instantiation of the application struct, then mocking the application method `delete`.
    Act: Invoke the `routes` method.
    Assert: Check if the router has "/api/movies/{id}" assigned for DELETE method and the assigned handler is `delete`.
  Validation:
    We are ensuring that a DELETE request to "/api/movies/{id}" endpoint should invoke the `delete` method. This is crucial for deleting a movie detail correctly via APIs.
*/

// ********RoostGPT********
package main

import (
	"github.com/gorilla/mux"
	"testing"
	"net/http/httptest"
)

func TestRoutes(t *testing.T) {
	// arrange
	app := new(application)
	
	// act
	r := app.routes()
	routes := r.GetRoutes()
	
	// assert
	tests := []struct {
		url string
		method string
		handlerFunc string
	}{
		{url: "/api/movies/", method: "GET", handlerFunc: "all"},
		{url: "/api/movies/{id}", method: "GET", handlerFunc: "findByID"},
		{url: "/api/movies/", method: "POST", handlerFunc: "insert"},
		{url: "/api/movies/{id}", method: "DELETE", handlerFunc: "delete"},
	}
	
	for _, test := range tests {
		t.Run(test.handlerFunc, func(t *testing.T) {
			req := httptest.NewRequest(test.method, test.url, nil)
			match := mux.RouteMatch{}
			matched := r.Match(req, &match)
			if !matched {
				t.Errorf("URL: %s with method: %s didn't match", test.url, test.method)
			} else {
				if match.Handler == nil {
					t.Errorf("URL: %s with method: %s didn't match with handler: %s", test.url, test.method, test.handlerFunc)
				}
			}
		})
	}
}
