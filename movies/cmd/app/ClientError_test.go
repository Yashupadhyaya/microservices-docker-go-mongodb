// ********RoostGPT********
/*
Test generated by RoostGPT for test azure-test-assistent using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=clientError_52010cf015
ROOST_METHOD_SIG_HASH=clientError_0dfad938af

Scenario 1: ClientError function returns the correct HTTP status text
Description: This test scenario checks if the `http.Error()` method inside the `clientError()` function correctly sends HTTP status text as a response
Execution:
  Arrange: Prepare a `http.ResponseWriter` with a `status` integer value in order to invoke the `clientError()`.
  Act: Call the `clientError()` function, passing in the prepared `http.ResponseWriter` and the `status` code.
  Assert: Check if the return text is the same as `http.StatusText(status)`.
Validation: The expectation is based on the functionalities of the `http.Error()` method. The test ensures that the function works correctly in normal situations and the HTTP status code and text is properly passed to it.

Scenario 2: ClientError function returns the correct HTTP status code
Description: This test scenario checks if the `http.Error()` method inside the `clientError()` function correctly sends HTTP status code as a response
Execution:
  Arrange: Prepare a `http.ResponseWriter ` with `status` integer value in order to invoke the `clientError()`.
  Act: Call the `clientError()` function, passing in the prepared `http.ResponseWriter` and the `status` code.
  Assert: Check if the return status code is equal to the `status`.
Validation: The expectation is based on the functionalities of the `http.Error()` method. This makes sure that the function works properly by sending the correct HTTP status code as a response.

Scenario 3: ClientError function handles invalid HTTP status code
Description: This test scenario checks how the `clientError()` function handles an invalid HTTP status code.
Execution:
  Arrange: Prepare a `http.ResponseWriter ` with a `status` integer value that does not correspond to a valid HTTP status code.
  Act: Call the `clientError()` function, passing in the prepared `http.ResponseWriter` and the `status` code.
  Assert: Check if the return status code is 500 (Internal Server Error), given that the `http.Error()` method should default to this status in the case of an invalid code.
Validation: The expectation is based on the default behavior of the `http.Error()` method when an invalid status code is supplied. It is important that the function can handle this edge case securely and not cause potential errors or unexpected behavior.
*/

// ********RoostGPT********
package main

import (
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"
)

// This is our function that we're going to test
func (app *application) clientError(w http.ResponseWriter, status int) {
	http.Error(w, http.StatusText(status), status)
}

// Define test scenarios and begin the table driven tests
func TestClientError(t *testing.T) {

	tests := []struct{
		name string
		status int
		wantStatusCode int
		wantStatusText string
	}{
		{"HTTP code OK", http.StatusOK, http.StatusOK, "OK"},
		{"HTTP code Not Found", http.StatusNotFound, http.StatusNotFound, "Not Found"},
		{"Invalid HTTP status code", 600, http.StatusInternalServerError, "Internal Server Error"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Set up our HTTP response recorder
			rec := httptest.NewRecorder()
			app := &application{}

			// Call the function that we're testing
			app.clientError(rec, tt.status)

			// Use the http.Response return value to check if it matches expectation
			res := rec.Result()

			if got := res.StatusCode; got != tt.wantStatusCode {
				t.Errorf("clientError() status code = %v, wantStatusCode = %v", got, tt.wantStatusCode)
			}

			got := rec.Body.String()
			if got != tt.wantStatusText+"\n" {
				t.Errorf("clientError() body = %q, wantStatusText %q", got, tt.wantStatusText)
			}
		})
	}
}

