// ********RoostGPT********
/*
Test generated by RoostGPT for test azure-test-assistent using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=all_f26e777913
ROOST_METHOD_SIG_HASH=all_c38f98e82e

Scenario 1: Successful Retrieval of All Movies

Details:
  Description: This test is meant to check if the 'all' function can successfully retrieve all movies in database when the function is called without any errors occurring during its execution.
Execution:
  Arrange: Mock the "All()" method of 'movies' to return a subset of movies, and ensure no error. Also, mock the 'serverError()'  function to handle any error if it comes up.
  Act: Invoke the 'all' function.
  Assert: Use Go testing facilities to verify that the actual results match the expected outcomes - appropriate log message, proper http status code and the movie data.
Validation:
  The assertion verifies that the function can successfully retrieve all movie entities from the database and return them as a JSON response. This is critical for any operation that needs a view of all available movies, such as a listing page on a movie site.

Scenario 2: Failure on Retrieval of Movies

Details:
  Description: This test is intended to check if the 'all' function can handle errors from the 'All()' method properly.
Execution:
  Arrange: Mock the 'All()' method of 'movies' to return an error.
  Act:Invoke the 'all' function.
  Assert: Use Go testing facilities to verify that the actual results match the expected outcomes - 'serverError()' function should be called and handled properly.
Validation:
  The assertion verifies that the function can handle errors that may arise from the 'All()' method. This is important in ensuring the application handles all errors gracefully and doesn't crash when there is an issue with the data retrieval.

Scenario 3: Failure on JSON Marshalling

Details:
  Description: This test is intended to check if the 'all' function properly handles errors that might occur during JSON marshalling of the movie data.
Execution:
  Arrange: Mock the 'All()' method of 'movies' to return a subset of movies, and ensure no error. Also, ensure that the JSON marshalling throws up an error by providing an unsupported type.
  Act: Invoke the 'all' function.
  Assert: Use Go testing facilities to ensure that the actual results match the expected outcomes - 'serverError()' function should be called and handled properly.
Validation:
  The assertion verifies that the function can handle errors that may arise during the JSON marshalling process. This is crucial for ensuring that the server only sends error-resistant data types in response to client requests.
*/

// ********RoostGPT********
package main

import (
	"errors"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// this is the mock struct for your movie model
type MovieModelMock struct {
	mock.Mock
}

func (m *MovieModelMock) All() ([]*models.Movie, error) {
	args := m.Called()
	return args.Get(0).([]*models.Movie), args.Error(1)
}

// define the struct for our tests
type suite struct {
	app *application
	mockModel *MovieModelMock
}

// initialize the test suite
func pkgInit() *suite {
	mockModel := new(MovieModelMock)
	return &suite {
		app: &application{
			infoLog: mockModel,
			movies: mockModel,
		},
		mockModel: mockModel,
	}
}

// TestAll this is our test function
func TestAll(t *testing.T) {
	s := pkgInit()

	// our test table
	var testTable = []struct {
		desc string
		setupMock func()
		checkResponse func(r *httptest.ResponseRecorder)
	}{
		{
			desc: "Successful Retrieval of All Movies",
			setupMock: func(){
				s.mockModel.On("All").Return([]*models.Movie{
					{Title: "test movie"},
				}, nil).Once()
			},
			checkResponse: func(r *httptest.ResponseRecorder) {
				resp := r.Result()
				defer resp.Body.Close()
				assert.Equal(t, http.StatusOK, resp.StatusCode)
			},
		},
		{
			desc: "Failure on Retrieval of Movies",
			setupMock: func() {
				s.mockModel.On("All").Return(nil, errors.New("failed retrieving data")).Once()
			},
			checkResponse: func(r *httptest.ResponseRecorder) {
				resp := r.Result()
				defer resp.Body.Close()
				assert.Equal(t, http.StatusInternalServerError, resp.StatusCode)
			},
		},
	}

	// running our tests
	for _, tc := range testTable {
		t.Run(tc.desc, func(t *testing.T) {
			r := httptest.NewRequest(http.MethodGet, "/movies", nil)
			w := httptest.NewRecorder()

			tc.setupMock()
			s.app.all(w, r)
			tc.checkResponse(w)

			s.mockModel.AssertExpectations(t)
		})
	}
}
